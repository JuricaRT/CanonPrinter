{"ast":null,"code":"import { AUTOFILL_SUGGESTIONS_FROM_API, CACHE_AUTOFILL_SUGGESTIONS, AUTOFILL_SUGGESTIONS_FROM_CACHE } from '../actions/types';\nconst initialState = {\n  cachedPrefix: \"\",\n  // The prefix for which \"cachedCall\" is valid\n  cachedCall: [],\n  // Cached autofill suggestions for the word \"cachedPrefix\"\n  autofillSuggestions: [] // Current autofill suggestions\n};\n\nexport default function autofillReducer(state = initialState, action) {\n  switch (action.type) {\n    case AUTOFILL_SUGGESTIONS_FROM_API:\n      return {\n        ...state,\n        autofillSuggestions: action.suggestionsPayload\n      };\n    case CACHE_AUTOFILL_SUGGESTIONS:\n      return {\n        ...state,\n        cachedPrefix: action.prefixPayload,\n        cachedCall: action.suggestionsPayload,\n        autofillSuggestions: []\n      };\n    case AUTOFILL_SUGGESTIONS_FROM_CACHE:\n      const word = action.wordPayload;\n      return {\n        ...state,\n        autofillSuggestions: state.cachedCall.filter(suggestion => {\n          return suggestion.slice(0, word.length) === word;\n        }).slice(0, action.numOfSuggestionsPayload)\n      };\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"names":["AUTOFILL_SUGGESTIONS_FROM_API","CACHE_AUTOFILL_SUGGESTIONS","AUTOFILL_SUGGESTIONS_FROM_CACHE","initialState","cachedPrefix","cachedCall","autofillSuggestions","autofillReducer","state","action","type","suggestionsPayload","prefixPayload","word","wordPayload","filter","suggestion","slice","length","numOfSuggestionsPayload"],"sources":["/Users/lovro/Faks/ProgI/CanonPrinter/IzvorniKod/frontend/src/reducers/autofill.js"],"sourcesContent":["import {\n    AUTOFILL_SUGGESTIONS_FROM_API,\n    CACHE_AUTOFILL_SUGGESTIONS,\n    AUTOFILL_SUGGESTIONS_FROM_CACHE\n} from '../actions/types';\n\n\nconst initialState = {\n    cachedPrefix: \"\", // The prefix for which \"cachedCall\" is valid\n    cachedCall: [], // Cached autofill suggestions for the word \"cachedPrefix\"\n    autofillSuggestions: [] // Current autofill suggestions\n};\n\nexport default function autofillReducer(state = initialState, action) {\n    switch (action.type) {\n        case AUTOFILL_SUGGESTIONS_FROM_API:\n            return {\n                ...state,\n                autofillSuggestions: action.suggestionsPayload\n            };\n        case CACHE_AUTOFILL_SUGGESTIONS:\n            return {\n                ...state,\n                cachedPrefix: action.prefixPayload,\n                cachedCall: action.suggestionsPayload,\n                autofillSuggestions: []\n            };\n        case AUTOFILL_SUGGESTIONS_FROM_CACHE:\n            const word = action.wordPayload;\n\n            return {\n                ...state,\n                autofillSuggestions: state.cachedCall\n                                        .filter((suggestion) => {\n                                                return suggestion.slice(0, word.length) === word;\n                                        })\n                                        .slice(0, action.numOfSuggestionsPayload)\n            };\n        default:\n            return state;\n    }\n};\n"],"mappings":"AAAA,SACIA,6BAA6B,EAC7BC,0BAA0B,EAC1BC,+BAA+B,QAC5B,kBAAkB;AAGzB,MAAMC,YAAY,GAAG;EACjBC,YAAY,EAAE,EAAE;EAAE;EAClBC,UAAU,EAAE,EAAE;EAAE;EAChBC,mBAAmB,EAAE,EAAE,CAAC;AAC5B,CAAC;;AAED,eAAe,SAASC,eAAeA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,EAAE;EAClE,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKV,6BAA6B;MAC9B,OAAO;QACH,GAAGQ,KAAK;QACRF,mBAAmB,EAAEG,MAAM,CAACE;MAChC,CAAC;IACL,KAAKV,0BAA0B;MAC3B,OAAO;QACH,GAAGO,KAAK;QACRJ,YAAY,EAAEK,MAAM,CAACG,aAAa;QAClCP,UAAU,EAAEI,MAAM,CAACE,kBAAkB;QACrCL,mBAAmB,EAAE;MACzB,CAAC;IACL,KAAKJ,+BAA+B;MAChC,MAAMW,IAAI,GAAGJ,MAAM,CAACK,WAAW;MAE/B,OAAO;QACH,GAAGN,KAAK;QACRF,mBAAmB,EAAEE,KAAK,CAACH,UAAU,CACZU,MAAM,CAAEC,UAAU,IAAK;UAChB,OAAOA,UAAU,CAACC,KAAK,CAAC,CAAC,EAAEJ,IAAI,CAACK,MAAM,CAAC,KAAKL,IAAI;QACxD,CAAC,CAAC,CACDI,KAAK,CAAC,CAAC,EAAER,MAAM,CAACU,uBAAuB;MACpE,CAAC;IACL;MACI,OAAOX,KAAK;EACpB;AACJ;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}