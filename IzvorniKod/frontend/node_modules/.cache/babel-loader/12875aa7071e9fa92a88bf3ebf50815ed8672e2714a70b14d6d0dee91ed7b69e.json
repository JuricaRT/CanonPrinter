{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport baseURL from \"./debug\";\nimport { LOAD_USER_PROFILE_SUCCESS, LOAD_USER_PROFILE_FAIL, UPDATE_USER_PROFILE_SUCCESS, UPDATE_USER_PROFILE_FAIL } from \"./types\";\nexport const load_user = () => async dispatch => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.get(`${baseURL}/profile`, config);\n    if (res.data.error) {\n      dispatch({\n        type: LOAD_USER_PROFILE_FAIL\n      });\n    } else {\n      dispatch({\n        type: LOAD_USER_PROFILE_SUCCESS,\n        payload: res.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_PROFILE_FAIL\n    });\n  }\n};\nexport const update_profile = (username, password, _name, last_name, passwordSet) => async dispatch => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": Cookies.get(\"csrftoken\")\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password,\n    _name,\n    last_name,\n    passwordSet\n  });\n  try {\n    const res = await axios.put(`${baseURL}/edit_profile`, body, config);\n    if (res.data.email) {\n      dispatch({\n        type: UPDATE_USER_PROFILE_SUCCESS,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: UPDATE_USER_PROFILE_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: UPDATE_USER_PROFILE_FAIL\n    });\n  }\n};\nexport const update_password = password => async dispatch => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": Cookies.get(\"csrftoken\")\n    }\n  };\n  const body = JSON.stringify({\n    password\n  });\n  try {\n    const res = await axios.put(`${baseURL}/update_pass`, body, config);\n    if (res.data.email) {\n      dispatch({\n        type: UPDATE_USER_PROFILE_SUCCESS,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: UPDATE_USER_PROFILE_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: UPDATE_USER_PROFILE_FAIL\n    });\n  }\n};","map":{"version":3,"names":["Cookies","axios","baseURL","LOAD_USER_PROFILE_SUCCESS","LOAD_USER_PROFILE_FAIL","UPDATE_USER_PROFILE_SUCCESS","UPDATE_USER_PROFILE_FAIL","load_user","dispatch","config","withCredentials","headers","Accept","res","get","data","error","type","payload","update_profile","username","password","_name","last_name","passwordSet","body","JSON","stringify","put","email","err","update_password"],"sources":["/Users/lovro/Faks/ProgI/CanonPrinter/IzvorniKod/frontend/src/actions/profile.js"],"sourcesContent":["import Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport baseURL from \"./debug\";\nimport {\n  LOAD_USER_PROFILE_SUCCESS,\n  LOAD_USER_PROFILE_FAIL,\n  UPDATE_USER_PROFILE_SUCCESS,\n  UPDATE_USER_PROFILE_FAIL,\n} from \"./types\";\n\nexport const load_user = () => async (dispatch) => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.get(`${baseURL}/profile`, config);\n\n    if (res.data.error) {\n      dispatch({\n        type: LOAD_USER_PROFILE_FAIL,\n      });\n    } else {\n      dispatch({\n        type: LOAD_USER_PROFILE_SUCCESS,\n        payload: res.data,\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_PROFILE_FAIL,\n    });\n  }\n};\n\nexport const update_profile =\n  (username, password, _name, last_name, passwordSet) => async (dispatch) => {\n    const config = {\n      withCredentials: true,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n      },\n    };\n\n    const body = JSON.stringify({\n      username,\n      password,\n      _name,\n      last_name,\n      passwordSet,\n    });\n\n    try {\n      const res = await axios.put(`${baseURL}/edit_profile`, body, config);\n      if (res.data.email) {\n        dispatch({\n          type: UPDATE_USER_PROFILE_SUCCESS,\n          payload: res.data,\n        });\n      } else {\n        dispatch({\n          type: UPDATE_USER_PROFILE_FAIL,\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_PROFILE_FAIL,\n      });\n    }\n  };\n\nexport const update_password = (password) => async (dispatch) => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n    },\n  };\n\n  const body = JSON.stringify({\n    password,\n  });\n\n  try {\n    const res = await axios.put(`${baseURL}/update_pass`, body, config);\n    if (res.data.email) {\n      dispatch({\n        type: UPDATE_USER_PROFILE_SUCCESS,\n        payload: res.data,\n      });\n    } else {\n      dispatch({\n        type: UPDATE_USER_PROFILE_FAIL,\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: UPDATE_USER_PROFILE_FAIL,\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}