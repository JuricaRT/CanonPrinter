{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport baseURL from \"./debug\";\nimport { SELECT_DICTIONARY, SELECT_DICTIONARY_FAIL, SELECT_MODE, SELECT_MODE_FAIL, GET_DICTIONARIES, GET_DICTIONARIES_FAIL, GET_MODES, GET_MODES_FAIL, START_LEARNING_FAIL, START_LEARNING } from \"./types\";\nimport { useSelector } from \"react-redux\";\nexport const get_dictionaries = () => async dispatch => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.get(`${baseURL}/dictionaries`, config);\n    if (res.data.error) {\n      dispatch({\n        type: GET_DICTIONARIES_FAIL\n      });\n    } else {\n      dispatch({\n        type: GET_DICTIONARIES,\n        payload: res.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_DICTIONARIES_FAIL\n    });\n  }\n};\nexport const select_dictionary = dictionary => async dispatch => {\n  dispatch({\n    type: SELECT_DICTIONARY,\n    payload: dictionary\n  });\n\n  // const config = {\n  //   withCredentials: true,\n  //   headers: {\n  //     Accept: \"application/json\",\n  //     \"Content-Type\": \"application/json\",\n  //     \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n  //   },\n  // };\n\n  // const body = JSON.stringify({\n  //   dictionary,\n  // });\n\n  // try {\n  //   const res = await axios.put(`${baseURL}/select_dictionary`, config, body);\n\n  //   if (res.data.error) {\n  //     dispatch({ type: SELECT_DICTIONARY_FAIL });\n  //   } else {\n  //     dispatch({ type: SELECT_DICTIONARY, payload: dictionary });\n  //   }\n  // } catch (error) {\n  //   dispatch({ type: SELECT_DICTIONARY_FAIL });\n  // }\n};\n\nexport const start_learning = mode => {\n  var _s = $RefreshSig$();\n  return _s(async dispatch => {\n    _s();\n    const dict = useSelector(state => state.learningSpecs.dictionary);\n    const lang = useSelector(state => state.learningSpecs.language);\n    const config = {\n      withCredentials: true,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": Cookies.get(\"csrftoken\")\n      }\n    };\n    const body = JSON.stringify({\n      dict,\n      lang,\n      mode\n    });\n    try {\n      const res = await axios.get(`${baseURL}/start_learning`, body, config);\n      if (res.data.error) {\n        dispatch({\n          type: START_LEARNING_FAIL\n        });\n        dispatch({\n          type: SELECT_MODE_FAIL,\n          payload: mode\n        });\n      } else {\n        dispatch({\n          type: START_LEARNING,\n          payload: res.data\n        });\n        dispatch({\n          type: SELECT_MODE,\n          payload: mode\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: START_LEARNING_FAIL\n      });\n      dispatch({\n        type: SELECT_MODE_FAIL,\n        payload: mode\n      });\n    }\n  }, \"1uX+tgr/r2E2DYpqoLpeEw3/Fek=\", false, function () {\n    return [useSelector, useSelector];\n  });\n};","map":{"version":3,"names":["Cookies","axios","baseURL","SELECT_DICTIONARY","SELECT_DICTIONARY_FAIL","SELECT_MODE","SELECT_MODE_FAIL","GET_DICTIONARIES","GET_DICTIONARIES_FAIL","GET_MODES","GET_MODES_FAIL","START_LEARNING_FAIL","START_LEARNING","useSelector","get_dictionaries","dispatch","config","withCredentials","headers","Accept","res","get","data","error","type","payload","select_dictionary","dictionary","start_learning","mode","_s","$RefreshSig$","dict","state","learningSpecs","lang","language","body","JSON","stringify"],"sources":["/Users/lovro/Faks/ProgI/CanonPrinter/IzvorniKod/frontend/src/actions/learningSpecs.js"],"sourcesContent":["import Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport baseURL from \"./debug\";\nimport {\n  SELECT_DICTIONARY,\n  SELECT_DICTIONARY_FAIL,\n  SELECT_MODE,\n  SELECT_MODE_FAIL,\n  GET_DICTIONARIES,\n  GET_DICTIONARIES_FAIL,\n  GET_MODES,\n  GET_MODES_FAIL,\n  START_LEARNING_FAIL,\n  START_LEARNING,\n} from \"./types\";\nimport { useSelector } from \"react-redux\";\n\nexport const get_dictionaries = () => async (dispatch) => {\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.get(`${baseURL}/dictionaries`, config);\n\n    if (res.data.error) {\n      dispatch({ type: GET_DICTIONARIES_FAIL });\n    } else {\n      dispatch({ type: GET_DICTIONARIES, payload: res.data });\n    }\n  } catch (error) {\n    dispatch({ type: GET_DICTIONARIES_FAIL });\n  }\n};\n\nexport const select_dictionary = (dictionary) => async (dispatch) => {\n  dispatch({ type: SELECT_DICTIONARY, payload: dictionary });\n\n  // const config = {\n  //   withCredentials: true,\n  //   headers: {\n  //     Accept: \"application/json\",\n  //     \"Content-Type\": \"application/json\",\n  //     \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n  //   },\n  // };\n\n  // const body = JSON.stringify({\n  //   dictionary,\n  // });\n\n  // try {\n  //   const res = await axios.put(`${baseURL}/select_dictionary`, config, body);\n\n  //   if (res.data.error) {\n  //     dispatch({ type: SELECT_DICTIONARY_FAIL });\n  //   } else {\n  //     dispatch({ type: SELECT_DICTIONARY, payload: dictionary });\n  //   }\n  // } catch (error) {\n  //   dispatch({ type: SELECT_DICTIONARY_FAIL });\n  // }\n};\n\nexport const start_learning = (mode) => async (dispatch) => {\n  const dict = useSelector((state) => state.learningSpecs.dictionary);\n  const lang = useSelector((state) => state.learningSpecs.language);\n\n  const config = {\n    withCredentials: true,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n    },\n  };\n\n  const body = JSON.stringify({\n    dict,\n    lang,\n    mode,\n  });\n\n  try {\n    const res = await axios.get(`${baseURL}/start_learning`, body, config);\n\n    if (res.data.error) {\n      dispatch({ type: START_LEARNING_FAIL });\n      dispatch({ type: SELECT_MODE_FAIL, payload: mode });\n    } else {\n      dispatch({ type: START_LEARNING, payload: res.data });\n      dispatch({ type: SELECT_MODE, payload: mode });\n    }\n  } catch (error) {\n    dispatch({ type: START_LEARNING_FAIL });\n    dispatch({ type: SELECT_MODE_FAIL, payload: mode });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}